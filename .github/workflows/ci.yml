name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  SOLANA_VERSION: 1.16.25
  ANCHOR_VERSION: 0.29.0

jobs:
  test:
    name: 🧪 Test Suite
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🦀 Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true
        components: rustfmt, clippy
        
    - name: 📦 Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        
    - name: 🌐 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: ☀️ Install Solana CLI
      run: |
        sh -c "$(curl -sSfL https://release.solana.com/v${{ env.SOLANA_VERSION }}/install)"
        echo "$HOME/.local/share/solana/install/active_release/bin" >> $GITHUB_PATH
        
    - name: ⚓ Install Anchor CLI
      run: |
        npm install -g @coral-xyz/anchor-cli@${{ env.ANCHOR_VERSION }}
        
    - name: 📦 Install dependencies
      run: npm ci
      
    - name: 🔍 Rust format check
      run: cargo fmt --all -- --check
      
    - name: 📎 Rust clippy
      run: cargo clippy --all-targets --all-features -- -D warnings
      
    - name: 🏗️ Build program
      run: anchor build
      
    - name: 🧪 Run Rust unit tests
      run: cargo test --manifest-path programs/meteora-fee-router/Cargo.toml --verbose
      
    - name: 🔧 Setup test validator
      run: |
        solana-test-validator --version
        
    - name: 🧪 Run integration tests
      run: anchor test --skip-local-validator
      
    - name: 📊 Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: |
          target/
          test-ledger/
          
  security:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🦀 Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true
        
    - name: 🔍 Security audit
      uses: actions-rs/audit@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 🛡️ Run cargo audit
      run: |
        cargo install cargo-audit
        cargo audit --deny warnings
        
  build:
    name: 🏗️ Build & Package
    runs-on: ubuntu-latest
    needs: [test, security]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🦀 Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true
        
    - name: 🌐 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: ☀️ Install Solana CLI
      run: |
        sh -c "$(curl -sSfL https://release.solana.com/v${{ env.SOLANA_VERSION }}/install)"
        echo "$HOME/.local/share/solana/install/active_release/bin" >> $GITHUB_PATH
        
    - name: ⚓ Install Anchor CLI
      run: |
        npm install -g @coral-xyz/anchor-cli@${{ env.ANCHOR_VERSION }}
        
    - name: 📦 Install dependencies
      run: npm ci
      
    - name: 🏗️ Optimized build
      run: |
        chmod +x deployment/optimize-build.sh
        ./deployment/optimize-build.sh
        
    - name: 📦 Package deliverables
      run: |
        node scripts/package-deliverables.js
        
    - name: 📤 Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: |
          target/deploy/
          target/idl/
          hackathon-submission/
          
  deploy-devnet:
    name: 🚀 Deploy to Devnet
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    environment: devnet
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📥 Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-artifacts
        
    - name: ☀️ Install Solana CLI
      run: |
        sh -c "$(curl -sSfL https://release.solana.com/v${{ env.SOLANA_VERSION }}/install)"
        echo "$HOME/.local/share/solana/install/active_release/bin" >> $GITHUB_PATH
        
    - name: 🔑 Setup deployment key
      run: |
        echo "${{ secrets.DEVNET_DEPLOY_KEY }}" > deploy-keypair.json
        solana config set --keypair deploy-keypair.json
        solana config set --url devnet
        
    - name: 🚀 Deploy to devnet
      run: |
        chmod +x deployment/deploy.sh
        ./deployment/deploy.sh devnet
        
    - name: ✅ Validate deployment
      run: |
        node deployment/validate-deployment.js
        
    - name: 🧹 Cleanup
      if: always()
      run: |
        rm -f deploy-keypair.json